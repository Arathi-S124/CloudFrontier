service: cloud-frontier-collector-gcp

plugins:
  - serverless-dotenv-plugin

package:
  exclude:
    - "**"
  include:
    - ip/ip
    - dns/dns
    - buckets/buckets
    - load-balancer/lb-frontend
    - servicedata/region.json
    - credentials.json

custom:
  dotenv:
    path: ../../credentials/gcp.env
    logging: false
    include:
      - GCPProjectID

  GCPCredentialsFilePath: credentials.json

  # DynamoDB tables:
  DynamoDBTableAssets: Assets

  # SNS topics:
  SNSTopicAnalyzeIP: analyze-ip
  SNSTopicAnalyzeIPARN:
    Fn::Join:
      - ':'
      - - 'arn:aws:sns'
        - Ref: 'AWS::Region'
        - Ref: 'AWS::AccountId'
        - ${self:custom.SNSTopicAnalyzeIP}
  SNSTopicAnalyzeDomain: analyze-domain
  SNSTopicAnalyzeDomainARN:
    Fn::Join:
      - ':'
      - - 'arn:aws:sns'
        - Ref: 'AWS::Region'
        - Ref: 'AWS::AccountId'
        - ${self:custom.SNSTopicAnalyzeDomain}
  SNSTopicAnalyzeObjectStorage: analyze-object-storage
  SNSTopicAnalyzeObjectStorageARN:
    Fn::Join:
      - ':'
      - - 'arn:aws:sns'
        - Ref: 'AWS::Region'
        - Ref: 'AWS::AccountId'
        - ${self:custom.SNSTopicAnalyzeObjectStorage}
  SNSTopicAnalyzeDataStore: analyze-data-store
  SNSTopicAnalyzeDataStoreARN:
    Fn::Join:
      - ':'
      - - 'arn:aws:sns'
        - Ref: 'AWS::Region'
        - Ref: 'AWS::AccountId'
        - ${self:custom.SNSTopicAnalyzeDataStore}
  SNSTopicAnalyzeAPIEndpoint: analyze-api-endpoint
  SNSTopicAnalyzeAPIEndpointARN:
    Fn::Join:
      - ':'
      - - 'arn:aws:sns'
        - Ref: 'AWS::Region'
        - Ref: 'AWS::AccountId'
        - ${self:custom.SNSTopicAnalyzeAPIEndpoint}
  SNSTopicAnalyzeCDN: analyze-cdn
  SNSTopicAnalyzeCDNARN:
    Fn::Join:
      - ':'
      - - 'arn:aws:sns'
        - Ref: 'AWS::Region'
        - Ref: 'AWS::AccountId'
        - ${self:custom.SNSTopicAnalyzeCDN}

  SNSTopicCollectGCP: collect-gcp
  SNSTopicCollectGCPARN:
    Fn::Join:
      - ':'
      - - 'arn:aws:sns'
        - Ref: 'AWS::Region'
        - Ref: 'AWS::AccountId'
        - ${self:custom.SNSTopicCollectGCP}

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  profile: ${opt:profile, 'default'}
  region: ${opt:region, 'us-east-1'}

  runtime: go1.x
  memorySize: 128
  timeout: 120

  versionFunctions: false
  logRetentionInDays: 14

  environment:
    GCPProjectID: ${env:GCPProjectID}
    GCPCredentialsFilePath: ${self:custom.GCPCredentialsFilePath}

    # DynamoDB tables:
    DynamoDBTableAssets: ${self:custom.DynamoDBTableAssets}

    # SNS topics:
    SNSTopicAnalyzeAPIEndpointARN: ${self:custom.SNSTopicAnalyzeAPIEndpointARN}
    SNSTopicAnalyzeCDNARN: ${self:custom.SNSTopicAnalyzeCDNARN}
    SNSTopicAnalyzeDataStoreARN: ${self:custom.SNSTopicAnalyzeDataStoreARN}
    SNSTopicAnalyzeDomainARN: ${self:custom.SNSTopicAnalyzeDomainARN}
    SNSTopicAnalyzeIPARN: ${self:custom.SNSTopicAnalyzeIPARN}
    SNSTopicAnalyzeObjectStorageARN: ${self:custom.SNSTopicAnalyzeObjectStorageARN}

  iamRoleStatements:
    # DynamoDB tables:
    - Effect: Allow
      Action:
        - dynamodb:BatchWriteItem
        - dynamodb:PutItem
      Resource:
        - Fn::Join:
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - table/${self:custom.DynamoDBTableAssets}
    # SNS topics:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - ${self:custom.SNSTopicAnalyzeAPIEndpointARN}
        - ${self:custom.SNSTopicAnalyzeCDNARN}
        - ${self:custom.SNSTopicAnalyzeDataStoreARN}
        - ${self:custom.SNSTopicAnalyzeDomainARN}
        - ${self:custom.SNSTopicAnalyzeIPARN}
        - ${self:custom.SNSTopicAnalyzeObjectStorageARN}

functions:
  GCPIPCollector:
    handler: ip/ip
    events:
      - sns:
          arn: ${self:custom.SNSTopicCollectGCPARN}
          topicName: ${self:custom.SNSTopicCollectGCP}

  GCPDomainDNSCollector:
    handler: dns/dns
    events:
      - sns:
          arn: ${self:custom.SNSTopicCollectGCPARN}
          topicName: ${self:custom.SNSTopicCollectGCP}

  GCPDomainLBCollector:
    handler: load-balancer/lb-frontend
    events:
      - sns:
          arn: ${self:custom.SNSTopicCollectGCPARN}
          topicName: ${self:custom.SNSTopicCollectGCP}

  GCPObjectStorageCollector:
    handler: buckets/buckets
    events:
      - sns:
          arn: ${self:custom.SNSTopicCollectGCPARN}
          topicName: ${self:custom.SNSTopicCollectGCP}
